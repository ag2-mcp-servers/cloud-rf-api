# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:12:11+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, confloat, conint, constr


class Pol(Enum):
    h = 'h'
    v = 'v'


class Antenna(BaseModel):
    ant: Optional[int] = Field(
        1, description='Antenna pattern code. 1=Vertical dipole (Omni-directional)'
    )
    azi: Optional[conint(ge=0, le=360)] = Field(
        0, description='Antenna azimuth in degrees north'
    )
    hbw: Optional[conint(ge=0, le=360)] = Field(
        0,
        description='Custom antenna horizontal beamwidth in degrees. For use only with ant=0',
    )
    pol: Optional[Pol] = Field('v', description='Antenna polarization as either h or v')
    tlt: Optional[confloat(ge=-10.0, le=90.0)] = Field(
        0, description='Antenna tilt in degrees below the horizon (inverted)'
    )
    txg: Optional[confloat(ge=-10.0, le=60.0)] = Field(
        2.15, description='Transmitter antenna gain in dBi'
    )
    txl: Optional[confloat(ge=0.0, le=60.0)] = Field(0, description='Feeder loss in dB')
    vbw: Optional[conint(ge=0, le=360)] = Field(
        0,
        description='Custom antenna vertical beamwidth in degrees. For use only with ant=0',
    )


class Environment(BaseModel):
    cll: Optional[conint(ge=1, le=2)] = Field(
        2,
        description='Clutter loss. 0=None/DSM only, 1=Hard / LOS mode, 2=Soft / NLOS mode',
    )
    clm: Optional[conint(ge=1, le=2)] = Field(
        1,
        description='Clutter mode. 0=None/DSM only, 1=System & custom clutter, 2=Custom clutter only',
    )
    mat: Optional[confloat(ge=0.1, le=9.0)] = Field(
        0.25,
        description='Clutter attenuation override in dB/m based on a tree block OR hollow building. Light foliage=0.1dB/m, brick=1.0dB/m, concrete=5dB/m',
    )


class Feature(BaseModel):
    geometry: Optional[str] = "{'type':'Polygon','coordinates':[[]]}"
    properties: Optional[str] = "{'height':4,'material':1}"
    type: Optional[str] = 'Feature'


class Model(BaseModel):
    cli: Optional[conint(ge=1, le=7)] = Field(
        6,
        description='Radio climate for ITM model (1). 1: Equatorial (Congo) 2: Continental Subtropical (Sudan) 3: Maritime Subtropical (West coast of Africa) 4: Desert (Sahara) 5: Continental Temperate 6: Maritime Temperate, over land (UK and west coasts of US & EU) 7: Maritime Temperate, over sea',
    )
    ked: Optional[conint(ge=0, le=1)] = Field(
        0,
        description='Knife edge diffraction for enhancing basic empirical models (Already in ITM)',
    )
    pe: Optional[conint(ge=1, le=3)] = Field(
        2,
        description='Propagation model subtype/environment. 1=Conservative/Urban,2=Average/Suburban,3=Optimistic/rural',
    )
    pm: Optional[conint(ge=1, le=20)] = Field(
        1,
        description='Propagation model. 1=Irregular Terrain Model, 2=Line of Sight (LOS), 3=Hata, 4=ECC33, 5=SUI Microwave, 6=COST231, 7=Free space path loss, 9=Ericsson9999, 10=Plane earth loss, 11=Egli.',
    )
    rel: Optional[conint(ge=50, le=99)] = Field(
        95, description='ITM model required reliability as %'
    )
    ter: Optional[conint(ge=1, le=6)] = Field(
        4,
        description='Terrain code for ITM model (1). 1=Water,2=Wet ground,3=Farmland,4=Forest/Average,5=Mountain/Sand,6=City/Poor ground',
    )


class Units(Enum):
    metric = 'metric'
    imperial = 'imperial'


class Output(BaseModel):
    ber: Optional[conint(ge=0, le=10)] = Field(
        0,
        description='Bit error rate. 1=0.1, 2=0.01, 3=0.001, 4=0.0001,5=0.00001,6=0.000001. >6=Lora: 7=SF7,8=SF8,9=SF9,10=SF10,11=SF11,12=SF12',
    )
    col: Optional[str] = Field(
        'RAINBOW.dBm',
        description='Colour schema code OR filename. 1 = Cellular (5), 2=Red, 3=Green, 4=Blue, 5=Microwave(7), 7=Custom RGB, 8=Automatic by frequency, 9=Greyscale / GIS, 10=Rainbow(24), 11=Green/Blue/Red, 13=Sub noise floor (10), 14=TV broadcasting (4), 15=Red threshold, 16=Green threshold, 17=Blue threshold. RAINBOW.dBm, CUSTOMSCHEMA.dBm..',
    )
    mod: Optional[conint(ge=1, le=11)] = Field(
        0,
        description='Modulation. 1=4QAM,2=16QAM,3=64QAM,4=256QAM,5=1024QAM,6=BPSK,7=QPSK,8=8PSK,9=16PSK,10=32PSK,11=LoRa',
    )
    nf: Optional[conint(ge=-120, le=-90)] = Field(
        -114, description='Noise floor in dBm for use with out=4 / SNR'
    )
    out: Optional[conint(ge=1, le=4)] = Field(
        2, description='Measured units. 1=dB,2=dBm,3=dBuV,4=SNR'
    )
    rad: Optional[confloat(ge=0.03, le=300.0)] = Field(
        5, description='Radius in kilometres for output'
    )
    res: Optional[conint(ge=2, le=200)] = Field(
        10, description='Resolution in metres for output'
    )
    units: Optional[Units] = Field(
        'metric',
        description='Distance units in either metres/kilometres (metric) or feet/miles (imperial)',
    )


class Point(BaseModel):
    alt: Optional[confloat(ge=0.1, le=60000.0)] = Field(
        1, description='Altitude above ground level in metres OR feet'
    )
    lat: Optional[confloat(ge=-89.0, le=89.0)] = Field(
        38.916, description='Latitude in decimal degrees'
    )
    lon: Optional[confloat(ge=-180.0, le=180.0)] = Field(
        1.411, description='Longitude in decimal degrees'
    )


class Receiver(BaseModel):
    alt: Optional[confloat(ge=0.1, le=60000.0)] = Field(
        0.1, description='Altitude above ground level in metres OR feet'
    )
    lat: Optional[confloat(ge=-89.0, le=89.0)] = Field(
        0, description='Latitude in decimal degrees'
    )
    lon: Optional[confloat(ge=-180.0, le=180.0)] = Field(
        0, description='Longitude in decimal degrees'
    )
    rxg: Optional[confloat(ge=-10.0, le=60.0)] = Field(
        2.15, description='Receiver antenna gain in dBi'
    )
    rxs: Optional[confloat(ge=-140.0, le=200.0)] = Field(
        -90,
        description="Receiver sensitivity/threshold in measured units defined by 'out' param",
    )


class Transmitter(BaseModel):
    alt: Optional[confloat(ge=0.1, le=60000.0)] = Field(
        1, description='Altitude above ground level in metres OR feet'
    )
    bwi: Optional[confloat(ge=0.1, le=100.0)] = Field(
        0.1,
        description='Bandwidth in MHz. 1MHz has a noise floor of -114dBm. 10MHz = -104dBm, 20MHz = -101dBm',
    )
    frq: Optional[confloat(ge=1.0, le=100000.0)] = Field(
        868, description='Centre frequency in megahertz'
    )
    lat: Optional[confloat(ge=-89.0, le=89.0)] = Field(
        38.916, description='Latitude in decimal degrees'
    )
    lon: Optional[confloat(ge=-180.0, le=180.0)] = Field(
        1.448, description='Longitude in decimal degrees'
    )
    txw: Optional[confloat(ge=0.001, le=2000000.0)] = Field(
        0.1, description='Transmitter power in watts before the antenna'
    )


class Fmt(Enum):
    kml = 'kml'
    kml_1 = 'kml'
    kmzppa = 'kmzppa'
    shp = 'shp'
    tiff = 'tiff'


class AreaPostRequest(BaseModel):
    antenna: Optional[Antenna] = None
    environment: Optional[Environment] = None
    model: Optional[Model] = None
    network: Optional[constr(min_length=1, max_length=24)] = Field(
        'Testing', description='Network name/group'
    )
    output: Optional[Output] = None
    receiver: Optional[Receiver] = None
    site: Optional[constr(min_length=1, max_length=24)] = Field(
        'A1', description='Site name'
    )
    transmitter: Optional[Transmitter] = None


class ClutterAddPostRequest(BaseModel):
    features: Optional[List[Feature]] = None
    name: Optional[str] = 'Clutter'
    type: Optional[str] = 'FeatureCollection'


class PathPostRequest(BaseModel):
    antenna: Optional[Antenna] = None
    environment: Optional[Environment] = None
    model: Optional[Model] = None
    network: Optional[constr(min_length=1, max_length=24)] = Field(
        'Testing', description='Network name/group'
    )
    output: Optional[Output] = None
    receiver: Optional[Receiver] = None
    site: Optional[constr(min_length=1, max_length=24)] = Field(
        'Link', description='Site name'
    )
    transmitter: Optional[Transmitter] = None


class PointsPostRequest(BaseModel):
    antenna: Optional[Antenna] = None
    environment: Optional[Environment] = None
    model: Optional[Model] = None
    network: Optional[constr(min_length=1, max_length=24)] = Field(
        'Testing', description='Network name/group'
    )
    output: Optional[Output] = None
    points: Optional[List[Point]] = None
    receiver: Optional[Receiver] = None
    site: Optional[constr(min_length=1, max_length=24)] = Field(
        'Points', description='Site name'
    )
    transmitter: Optional[Transmitter] = None
